% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/node-protection.R
\name{add_protected_ranges}
\alias{add_protected_ranges}
\alias{is_protected}
\alias{get_protected_ranges}
\alias{remove_protected_ranges}
\title{Handle protected ranges for a node}
\usage{
add_protected_ranges(node, start, end)

is_protected(node)

get_protected_ranges(node)

remove_protected_ranges(node)
}
\arguments{
\item{node}{an XML \verb{<text>} node.}

\item{start}{\verb{\[integer\]} a vector of starting indices of a set of ranges}

\item{end}{\verb{\[integer\]} a vector of ending indices that are paired with
\code{start}}
}
\value{
\itemize{
\item \code{add_protected_ranges()}: the modified node
\item \code{remove_protected_ranges()}: the modified node
\item \code{is_protected()}: \code{TRUE} if the node has protection attributes
\item \code{get_protected_ranges()} a list containing integer vectors \code{start} and
\code{end} if the node is protected, otherwise, it returns NULL
}
}
\description{
Handle protected ranges for a node
}
\examples{
# example of text to protect
# SETUP ---------------------
expected <- c(
  "\\\\a\\\\b\\\\c\\\\d",
  "\\\\e\\\\f\\\\g\\\\h",
  ""
)
temp_file <- tempfile()
writeLines(expected, temp_file)
wool <- tinkr::yarn$new(temp_file)
nodes <- xml2::xml_find_all(wool$body, ".//md:text", ns = md_ns())
writeLines(expected) # this is how it should appear
wool$show() # nothing is protected, so the '\' are escaped
# ADDING PROTECTION ----------
# protections are added _per node_
add_protected_ranges(nodes[[1]], start = 1, end = 8) # protect whole range
add_protected_ranges(nodes[[2]], start = c(1, 7), end = c(2, 8)) # partial
wool$show() # the first row and "\e" and "\h" are protected

# extract the ranges
is_protected(nodes[[1]])
is_protected(nodes[[2]])
get_protected_ranges(nodes[[1]])
get_protected_ranges(nodes[[2]])

# Add additional protection that overlaps.
# The current range is [1, 2] and [7, 8]. If we add [5, 8], the range
# will be updated
add_protected_ranges(nodes[[2]], start = 5, end = 8) 
get_protected_ranges(nodes[[2]])

# overlapping protection is not duplicated
add_protected_ranges(nodes[[1]], start = 1, end = 4) 
get_protected_ranges(nodes[[1]])

wool$show() # the first row and "\e", "\g", and "\h" are protected

# REMOVING PROTECTION --------
remove_protected_ranges(nodes[[2]])
is_protected(nodes[[2]])
get_protected_ranges(nodes[[2]])
wool$show()

# CLEAN UP -------------------
if (file.exists(temp_file)) unlink(temp_file)
}
